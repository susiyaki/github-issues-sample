{"version":3,"sources":["lib/color.ts","components/atoms/Label.tsx","components/atoms/Link.tsx","components/atoms/IssueIcon.tsx","components/atoms/IssueFilterButton.tsx","components/atoms/Indicator.tsx","components/molecules/LabelGroup.tsx","components/molecules/Pagination.tsx","config/route.ts","components/molecules/IssueListItem.tsx","components/molecules/IssueListHeader.tsx","components/organisms/IssueList.tsx","components/organisms/Header.tsx","hooks/api/github/issues/endpoint.ts","hooks/api/github/apiClient.ts","hooks/api/github/issues/request.ts","hooks/api/github/issues/index.ts","hooks/api/github/search/endpoint.ts","hooks/api/github/search/request.ts","pages/issues/index.tsx","hooks/api/github/search/index.ts","pages/issues/_number/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colorService","hex","slice","length","map","str","parseInt","rgb","Math","floor","Label","backgroundColor","content","bg","color","getLabelColor","Link","to","fontWeight","hoverColor","underline","IssueIcon","state","ACTIVE_COLOR","INACTIVE_COLOR","IssueFilterButton","type","active","count","onClick","marginRight","style","cursor","alignItems","size","toUpperCase","OverlayIndicator","isVisible","width","height","bottom","top","left","position","marginLeft","marginTop","LabelGroup","labels","label","name","id","Pagination","perPage","totalCount","props","pageCount","useMemo","ceil","marginPageCount","surroundingPageCount","route","issueId","IssueListItem","issue","paddingTop","paddingLeft","padding","number","title","fontSize","created_at","user","login","IssueListHeader","filter","openIssuesCount","closedIssuesCount","handleChangeFilter","borderRadius","borderBottomWidth","borderTopLeftRadius","borderTopRightRadius","margin","IssueList","issues","index","borderWidth","borderBottom","Header","Item","githubIssueEndpoint","owner","repo","page","issueNumStr","apiClient","axios","create","baseURL","interceptors","request","use","req","githubIssueApiRequest","queryParams","get","then","res","data","useGithubIssuesApi","getIssues","options","useQuery","queryKey","queryFn","getIssue","githubSearchEndpoint","githubSearchApiRequest","Issues","searchIssues","useState","setIssuus","setPage","setFilter","openIssues","refetchOnMount","closedIssues","status","onSuccess","total_count","useCallback","prev","handlePageChange","e","preventDefault","marginBottom","currentPage","onPageChange","Issue","match","params","body","queryClient","QueryClient","App","QueryClientProvider","client","exact","path","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.591f4dbc.chunk.js","sourcesContent":["export const colorService = {\n  hex2rgb: (hex: string): number[] => {\n    if (hex.slice(0, 1) == '#') hex = hex.slice(1);\n    if (hex.length == 3)\n      hex =\n        hex.slice(0, 1) +\n        hex.slice(0, 1) +\n        hex.slice(1, 2) +\n        hex.slice(1, 2) +\n        hex.slice(2, 3) +\n        hex.slice(2, 3);\n\n    return [hex.slice(0, 2), hex.slice(2, 4), hex.slice(4, 6)].map(function (\n      str,\n    ) {\n      return parseInt(str, 16);\n    });\n  },\n\n  getLuminance: (rgb: number[]): number => {\n    const r = 0.298912;\n    const g = 0.586611;\n    const b = 0.114478;\n    return Math.floor(r * rgb[0] + g * rgb[1] + b * rgb[2]);\n  },\n};\n","import React from 'react';\nimport {colorService} from '@lib';\nimport {Label as PrimerLabel} from '@primer/components';\nimport {ResponsiveValue} from 'styled-system';\nimport {BackgroundColorProperty} from 'styled-system/node_modules/csstype';\n\ntype Props = {\n  backgroundColor?: ResponsiveValue<BackgroundColorProperty>;\n  content: string;\n};\n\nexport const Label: React.FC<Props> = ({backgroundColor, content}) => {\n  // NOTE: 背景色の輝度に合わせて文字色を黒or白で出力\n  const getLabelColor = (hex: string) => {\n    const rgb = colorService.hex2rgb(hex);\n    const luminance = colorService.getLuminance(rgb);\n    if (luminance > 120) {\n      return '#000';\n    } else {\n      return '#FFF';\n    }\n  };\n\n  return (\n    <PrimerLabel\n      bg={backgroundColor && `#${backgroundColor}`}\n      color={backgroundColor && getLabelColor(backgroundColor as string)}>\n      {content}\n    </PrimerLabel>\n  );\n};\n","import React from 'react';\nimport {Link as RouterLink} from 'react-router-dom';\nimport {Link as PrimerLink} from '@primer/components';\nimport {ResponsiveValue} from 'styled-system';\nimport {\n  FontWeightProperty,\n  ColorProperty,\n} from 'styled-system/node_modules/csstype';\n\ntype Props = {\n  to: string;\n  content: string;\n  color?: ResponsiveValue<ColorProperty>;\n  fontWeight?: ResponsiveValue<FontWeightProperty>;\n};\n\nexport const Link: React.FC<Props> = ({to, content, color, fontWeight}) => {\n  return (\n    <RouterLink to={to}>\n      <PrimerLink\n        color={color || '#000'}\n        hoverColor=\"#0366d6\"\n        underline={false}\n        fontWeight={fontWeight}>\n        {content}\n      </PrimerLink>\n    </RouterLink>\n  );\n};\n","import React from 'react';\nimport {GoIssueOpened, GoIssueClosed} from 'react-icons/go';\n\ntype Props = {\n  state: 'open' | 'closed' | 'all';\n};\n\nexport const IssueIcon: React.FC<Props> = ({state}) =>\n  state === 'open' ? (\n    <GoIssueOpened color=\"#22863a\" />\n  ) : (\n    <GoIssueClosed color=\"#cb2431\" />\n  );\n","import React from 'react';\nimport {Box, Flex, Link} from '@primer/components';\nimport {GoIssueOpened, GoCheck, GoThreeBars} from 'react-icons/go';\n\ntype Props = {\n  type: 'open' | 'closed' | 'all';\n  active: 'open' | 'closed' | 'all';\n  count?: number;\n  onClick: () => void;\n};\n\nconst ACTIVE_COLOR = '#24292e';\nconst INACTIVE_COLOR = '#586069';\n\nexport const IssueFilterButton: React.FC<Props> = ({\n  type,\n  active,\n  count,\n  onClick,\n}) => {\n  return (\n    <Box marginRight=\"16px\">\n      <Link\n        onClick={onClick}\n        backgroundColor=\"transparent\"\n        hoverColor={ACTIVE_COLOR}\n        color={type === active ? ACTIVE_COLOR : INACTIVE_COLOR}\n        style={{cursor: 'pointer'}}>\n        <Flex alignItems=\"center\">\n          {type === 'open' ? (\n            <GoIssueOpened\n              color={type === active ? ACTIVE_COLOR : INACTIVE_COLOR}\n              size={18}\n            />\n          ) : type === 'closed' ? (\n            <GoCheck\n              color={type === active ? ACTIVE_COLOR : INACTIVE_COLOR}\n              size={18}\n            />\n          ) : (\n            <GoThreeBars\n              color={type === active ? ACTIVE_COLOR : INACTIVE_COLOR}\n              size={18}\n            />\n          )}\n          &nbsp;\n          {count || '?'} {type.slice(0, 1).toUpperCase()}\n          {type.slice(1)}\n        </Flex>\n      </Link>\n    </Box>\n  );\n};\n","import React from 'react';\nimport ReactLoading from 'react-loading';\n\ntype Props = {\n  isVisible: boolean;\n};\n\nexport const OverlayIndicator: React.FC<Props> = ({isVisible}) => {\n  if (!isVisible) return null;\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: 'auto',\n        bottom: '0px',\n        top: '0px',\n        left: '0px',\n        position: 'absolute',\n      }}>\n      <div\n        style={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          marginLeft: '-10px',\n          marginTop: '-10px',\n        }}>\n        <ReactLoading type=\"spin\" height={20} width={20} color=\"#000\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {LabelGroup as PrimerLabelGroup} from '@primer/components';\nimport {Label} from '@components/atoms';\nimport {ApiResponse} from '@types';\n\ntype Props = {\n  labels: ApiResponse.Github.Label[];\n};\n\nexport const LabelGroup: React.FC<Props> = ({labels}) => {\n  if (labels.length === 0) return null;\n\n  return (\n    <PrimerLabelGroup>\n      {labels.map((label) => (\n        <Label\n          key={label.id}\n          backgroundColor={label.color}\n          content={label.name}\n        />\n      ))}\n    </PrimerLabelGroup>\n  );\n};\n","import React, {useMemo} from 'react';\nimport {\n  Pagination as PrimerPagination,\n  PaginationProps,\n} from '@primer/components';\n\ntype Props = Omit<PaginationProps, 'pageCount'> & {\n  perPage: number;\n  totalCount: number;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  perPage,\n  totalCount,\n  ...props\n}) => {\n  const pageCount = useMemo(() => {\n    return Math.ceil(totalCount / perPage);\n  }, [perPage, totalCount]);\n\n  return (\n    <PrimerPagination\n      {...props}\n      pageCount={pageCount}\n      marginPageCount={2}\n      surroundingPageCount={2}\n    />\n  );\n};\n","export const route = {\n  issues: '/issues',\n  showIssue: (issueId: number): string => `/issues/${issueId}`,\n};\n","import React from 'react';\nimport {Box, Flex, Text} from '@primer/components';\nimport {Link, IssueIcon} from '@components/atoms';\nimport {LabelGroup} from '@components/molecules';\nimport {ApiResponse} from '@types';\nimport {route} from '@config/route';\n\ntype Props = {\n  issue: ApiResponse.Github.Issue;\n};\n\nexport const IssueListItem: React.FC<Props> = ({issue}) => {\n  return (\n    // TODO: change opacity when hover item\n    <Box>\n      <Flex>\n        <Box paddingTop=\"8px\" paddingLeft=\"16px\">\n          <IssueIcon state={issue.state} />\n        </Box>\n        <Box padding=\"8px\">\n          <Box>\n            <Link\n              to={route.showIssue(issue.number)}\n              content={issue.title}\n              fontWeight={600}\n            />\n            &nbsp;\n            <LabelGroup labels={issue.labels} />\n          </Box>\n          <Box marginTop=\"4px\">\n            <Text color=\"#586069\" fontSize=\"14px\">\n              #{issue.number} opened on {issue.created_at} by {issue.user.login}\n            </Text>\n          </Box>\n        </Box>\n      </Flex>\n    </Box>\n  );\n};\n","import React from 'react';\nimport {BorderBox, Flex} from '@primer/components';\nimport {IssueFilterButton} from '@components/atoms';\n\nexport type IssueListHeaderProps = {\n  filter: {state: 'all' | 'open' | 'closed'};\n  openIssuesCount?: number;\n  closedIssuesCount?: number;\n  handleChangeFilter: (filterParams: {\n    state: 'all' | 'open' | 'closed';\n  }) => void;\n};\n\nexport const IssueListHeader: React.FC<IssueListHeaderProps> = ({\n  filter,\n  openIssuesCount,\n  closedIssuesCount,\n  handleChangeFilter,\n}) => {\n  return (\n    <BorderBox\n      borderRadius={0}\n      borderBottomWidth={1}\n      borderTopLeftRadius={6}\n      borderTopRightRadius={6}\n      backgroundColor=\"#f6f8fa\"\n      padding=\"16px\"\n      margin=\"-1px -1px 0\">\n      <Flex>\n        <IssueFilterButton\n          type=\"open\"\n          active={filter.state}\n          count={openIssuesCount}\n          onClick={() => handleChangeFilter({state: 'open'})}\n        />\n        <IssueFilterButton\n          type=\"closed\"\n          active={filter.state}\n          count={closedIssuesCount}\n          onClick={() => handleChangeFilter({state: 'closed'})}\n        />\n        <IssueFilterButton\n          type=\"all\"\n          active={filter.state}\n          count={(openIssuesCount || 0) + (closedIssuesCount || 0)}\n          onClick={() => handleChangeFilter({state: 'all'})}\n        />\n      </Flex>\n    </BorderBox>\n  );\n};\n","import React from 'react';\nimport {BorderBox} from '@primer/components';\nimport {\n  IssueListItem,\n  IssueListHeader,\n  IssueListHeaderProps,\n} from '@components/molecules';\nimport {ApiResponse} from '@types';\n\ntype Props = {\n  issues: ApiResponse.Github.Issue[];\n} & IssueListHeaderProps;\n\nexport const IssueList: React.FC<Props> = ({\n  issues,\n  filter,\n  openIssuesCount,\n  closedIssuesCount,\n  handleChangeFilter,\n}) => {\n  return (\n    <BorderBox>\n      <IssueListHeader\n        filter={filter}\n        openIssuesCount={openIssuesCount}\n        closedIssuesCount={closedIssuesCount}\n        handleChangeFilter={handleChangeFilter}\n      />\n      {issues.map((issue, index) => (\n        <BorderBox\n          key={issue.id}\n          borderRadius={0}\n          borderWidth={0}\n          borderBottom={1}\n          borderBottomWidth={issues.length - 1 === index ? 0 : 1}>\n          <IssueListItem issue={issue} />\n        </BorderBox>\n      ))}\n    </BorderBox>\n  );\n};\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Header as PrimerHeader, Flex, Text} from '@primer/components';\nimport {CgGhostCharacter} from 'react-icons/cg';\nimport {route} from '@config/route';\n\ntype Props = Record<string, unknown>;\n\nexport const Header: React.FC<Props> = () => {\n  return (\n    <PrimerHeader backgroundColor=\"#24292e\">\n      <PrimerHeader.Item>\n        <Link to={route.issues}>\n          <Flex alignItems=\"center\">\n            <CgGhostCharacter color=\"#ffffff\" size={32} />\n            &nbsp;\n            <Text color=\"#ffffff\" fontSize={16}>\n              Github Issues Dummy\n            </Text>\n          </Flex>\n        </Link>\n      </PrimerHeader.Item>\n    </PrimerHeader>\n  );\n};\n","type GetIssuesQueryParams = {\n  owner: string;\n  repo: string;\n  page: number;\n  perPage: number;\n  state?: 'all' | 'open' | 'closed';\n};\ntype GetIssueQueryParams = {\n  owner: string;\n  repo: string;\n  issueNumStr: string;\n};\n\nexport type {GetIssuesQueryParams, GetIssueQueryParams};\n\nexport const githubIssueEndpoint = {\n  getIssues: ({\n    owner,\n    repo,\n    page,\n    perPage,\n    state,\n  }: GetIssuesQueryParams): string =>\n    `repos/${owner}/${repo}/issues?page=${page}&per_page=${perPage}&state=${\n      state || 'all'\n    }`,\n\n  getIssue: ({owner, repo, issueNumStr}: GetIssueQueryParams): string =>\n    `repos/${owner}/${repo}/issues/${issueNumStr}`,\n\n  openIssues: ({owner, repo, issueNumStr}: GetIssueQueryParams): string =>\n    `repos/${owner}/${repo}/issues/${issueNumStr}`,\n};\n","import axios from 'axios';\nexport const apiClient = axios.create({\n  baseURL: 'https://api.github.com/',\n});\n\napiClient.interceptors.request.use((req) => {\n  process.env.NODE_ENV === 'development' &&\n    console.log(`${req.method?.toUpperCase()}: ${req.baseURL}${req.url}`);\n  return req;\n});\n","import {ApiResponse} from '@types';\nimport {\n  GetIssueQueryParams,\n  GetIssuesQueryParams,\n  githubIssueEndpoint,\n} from './endpoint';\nimport {apiClient} from '../apiClient';\n\nexport const githubIssueApiRequest = {\n  getIssues: ({\n    queryParams,\n  }: {\n    queryParams: GetIssuesQueryParams;\n  }): Promise<ApiResponse.Github.Issue[]> =>\n    apiClient\n      .get<ApiResponse.Github.Issue[]>(\n        githubIssueEndpoint.getIssues(queryParams),\n      )\n      .then((res) => res.data),\n\n  getIssue: ({\n    queryParams,\n  }: {\n    queryParams: GetIssueQueryParams;\n  }): Promise<ApiResponse.Github.Issue> =>\n    apiClient\n      .get<ApiResponse.Github.Issue>(githubIssueEndpoint.getIssue(queryParams))\n      .then((res) => res.data),\n};\n","import {QueryObserverOptions, useQuery, UseQueryResult} from 'react-query';\nimport {ApiResponse} from '@types';\nimport {githubIssueApiRequest} from './request';\nimport {GetIssuesQueryParams, GetIssueQueryParams} from './endpoint';\n\ntype UseIssuesApi = {\n  getIssues: (args: {\n    queryParams: GetIssuesQueryParams;\n    options?: QueryObserverOptions<ApiResponse.Github.Issue[], Error>;\n  }) => UseQueryResult<ApiResponse.Github.Issue[], Error>;\n\n  getIssue: (args: {\n    queryParams: GetIssueQueryParams;\n    options?: QueryObserverOptions<ApiResponse.Github.Issue, Error>;\n  }) => UseQueryResult<ApiResponse.Github.Issue, Error>;\n};\n\nexport const useGithubIssuesApi = (): UseIssuesApi => {\n  return {\n    getIssues: ({queryParams, options}) =>\n      useQuery({\n        queryKey: [\n          'issues',\n          queryParams.owner,\n          queryParams.repo,\n          queryParams.page,\n          queryParams.perPage,\n          queryParams.state,\n        ],\n        queryFn: () => githubIssueApiRequest.getIssues({queryParams}),\n        ...options,\n      }),\n\n    getIssue: ({queryParams, options}) =>\n      useQuery({\n        queryKey: [\n          'issue',\n          queryParams.owner,\n          queryParams.repo,\n          queryParams.issueNumStr,\n        ],\n        queryFn: () => githubIssueApiRequest.getIssue({queryParams}),\n        ...options,\n      }),\n  };\n};\n","type SearchIssuesQueryParams = {\n  repo: string;\n  state?: 'open' | 'closed';\n};\n\nexport type {SearchIssuesQueryParams};\n\nexport const githubSearchEndpoint = {\n  searchIssues: ({repo, state}: SearchIssuesQueryParams): string =>\n    `search/issues?q=repo:${repo}+type:issue${state && `+state:${state}`}`,\n};\n","import {ApiResponse} from '@types';\nimport {githubSearchEndpoint, SearchIssuesQueryParams} from './endpoint';\nimport {apiClient} from '../apiClient';\n\nexport const githubSearchApiRequest = {\n  // NOTE: https://docs.github.com/en/rest/reference/search#search-issues-and-pull-requests\n  searchIssues: ({\n    queryParams,\n  }: {\n    queryParams: SearchIssuesQueryParams;\n  }): Promise<ApiResponse.Github.SearchResult> =>\n    apiClient\n      .get<ApiResponse.Github.SearchResult>(\n        githubSearchEndpoint.searchIssues(queryParams),\n      )\n      .then((res) => res.data),\n};\n","import React, {useCallback, useMemo, useState} from 'react';\nimport {OverlayIndicator} from '@components/atoms';\nimport {Pagination} from '@components/molecules';\nimport {IssueList} from '@components/organisms';\nimport {useGithubIssuesApi, useGithubSearchApi} from '@hooks';\nimport {ApiResponse} from '@types';\nimport {Box, Flex, Heading} from '@primer/components';\nimport {BiBookBookmark} from 'react-icons/bi';\n\ntype Props = Record<string, unknown>;\n\nconst PER_PAGE = 10;\n// TODO\nconst owner = 'facebook';\nconst repo = 'react';\n\nexport const Issues: React.FC<Props> = () => {\n  const {getIssues} = useGithubIssuesApi();\n  const {searchIssues} = useGithubSearchApi();\n  const [issues, setIssuus] = useState<ApiResponse.Github.Issue[]>([]);\n  const [page, setPage] = useState<number>(1);\n  const [filter, setFilter] = useState<{state: 'all' | 'open' | 'closed'}>({\n    state: 'open',\n  });\n\n  const {data: openIssues} = searchIssues({\n    queryParams: {\n      repo: `${owner}/${repo}`,\n      state: 'open',\n    },\n    options: {refetchOnMount: false},\n  });\n  const {data: closedIssues} = searchIssues({\n    queryParams: {\n      repo: `${owner}/${repo}`,\n      state: 'closed',\n    },\n    options: {refetchOnMount: false},\n  });\n  const {status} = getIssues({\n    queryParams: {\n      owner,\n      repo,\n      page,\n      perPage: PER_PAGE,\n      state: filter.state,\n    },\n    options: {\n      onSuccess: (res) => setIssuus(res),\n    },\n  });\n\n  const totalCount = useMemo(() => {\n    if (!openIssues || !closedIssues) return 1;\n\n    if (filter.state === 'open') {\n      return openIssues.total_count;\n    } else if (filter.state === 'closed') {\n      return closedIssues.total_count;\n    } else {\n      return openIssues.total_count + closedIssues.total_count;\n    }\n  }, [openIssues, closedIssues, filter.state]);\n\n  const handleChangeFilter = useCallback(({state}) => {\n    setFilter((prev) => ({...prev, state}));\n  }, []);\n\n  const handlePageChange = useCallback(\n    (e, page) => {\n      e.preventDefault();\n      setPage(page);\n    },\n    [page],\n  );\n\n  if (issues.length === 0 && status === 'loading') {\n    return <OverlayIndicator isVisible={true} />;\n  }\n\n  return (\n    <Box marginLeft=\"10%\" marginRight=\"10%\" paddingTop=\"16px\">\n      <Heading fontSize={20} marginBottom=\"16px\">\n        <Flex alignItems=\"center\">\n          <BiBookBookmark />\n          &nbsp;\n          {owner}/{repo}\n        </Flex>\n      </Heading>\n      <IssueList\n        issues={issues}\n        filter={filter}\n        openIssuesCount={openIssues?.total_count}\n        closedIssuesCount={closedIssues?.total_count}\n        handleChangeFilter={handleChangeFilter}\n      />\n      <Pagination\n        currentPage={page}\n        perPage={PER_PAGE}\n        totalCount={totalCount}\n        onPageChange={handlePageChange}\n      />\n    </Box>\n  );\n};\n","import {useQuery, UseQueryResult, QueryObserverOptions} from 'react-query';\nimport {ApiResponse} from '@types';\nimport {githubSearchApiRequest} from './request';\nimport {SearchIssuesQueryParams} from './endpoint';\n\ntype UseGithubSearchApi = {\n  searchIssues: (args: {\n    queryParams: SearchIssuesQueryParams;\n    options?: QueryObserverOptions<ApiResponse.Github.SearchResult, Error>;\n  }) => UseQueryResult<ApiResponse.Github.SearchResult, Error>;\n};\n\nexport const useGithubSearchApi = (): UseGithubSearchApi => {\n  return {\n    searchIssues: ({queryParams, options}) =>\n      useQuery({\n        queryKey: ['search', queryParams.repo, queryParams.state],\n        queryFn: () => githubSearchApiRequest.searchIssues({queryParams}),\n        ...options,\n      }),\n  };\n};\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {useGithubIssuesApi} from '@hooks';\n\ntype Props = Record<string, unknown> & RouteComponentProps<{number: string}>;\n\n// TODO\nconst owner = 'facebook';\nconst repo = 'react';\n\nexport const Issue: React.FC<Props> = (props) => {\n  const {getIssue} = useGithubIssuesApi();\n  const issueNumStr = props.match.params.number;\n  const {data: issue, status} = getIssue({\n    queryParams: {owner, repo, issueNumStr},\n  });\n\n  if (status === 'loading') {\n    return (\n      <div>\n        <p>loading...</p>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <p>issue番号: {issue?.number}</p>\n      <p>タイトル: {issue?.title}</p>\n      <p>本文: {issue?.body}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport {QueryClient, QueryClientProvider} from 'react-query';\nimport {HashRouter, Switch, Route, Redirect} from 'react-router-dom';\nimport {Header} from '@components/organisms';\nimport {Issues} from '@pages/issues';\nimport {Issue} from '@pages/issues/_number';\n\ntype Props = Record<string, unknown>;\n\nconst queryClient = new QueryClient();\n\nconst App: React.FC<Props> = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <HashRouter>\n        <Header />\n        <Switch>\n          <Route exact path=\"/issues/:number\" component={Issue} />\n          <Route exact path=\"/issues\" component={Issues} />\n          <Route render={() => <Redirect to=\"/issues\" />} />\n        </Switch>\n      </HashRouter>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}